import edu.wpi.first.gradlerio.GradleRIOPlugin
import groovy.json.JsonSlurper

plugins {
  id "java"
  id "edu.wpi.first.GradleRIO" version "2025.2.1"
  id "com.peterabeles.gversion" version "1.10"
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "org.dovershockwave.Main"

deploy {
  //noinspection GroovyAssignabilityCheck
  targets {
    roborio(getTargetTypeClass('RoboRIO')) {
      team = project.frc.getTeamOrDefault(4546)
      debug = project.frc.getDebugOrDefault(false)

      artifacts {
        frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
          jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
          jvmArgs.add("-XX:GCTimeRatio=5")
          jvmArgs.add("-XX:+UseSerialGC")
        }

        // Static files artifact
        frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
          files = project.fileTree('src/main/deploy')
          directory = '/home/lvuser/deploy'
          deleteOldFiles = false
        }
      }
    }
  }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Configuration for AdvantageKit
tasks.register('replayWatch', JavaExec) {
  mainClass = "org.littletonrobotics.junction.ReplayWatch"
  classpath = sourceSets.main.runtimeClasspath
}

dependencies {
  annotationProcessor wpi.java.deps.wpilibAnnotations()
  implementation wpi.java.deps.wpilib()
  implementation wpi.java.vendor.java()

  roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
  roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

  roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
  roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

  nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
  nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
  simulationDebug wpi.sim.enableDebug()

  nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
  nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
  simulationRelease wpi.sim.enableRelease()

  def akitJson = new JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
  annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

wpi.sim.addGui().defaultEnabled = false
wpi.sim.addDriverstation()

jar {
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.allSource
  manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs.add '-XDstringConcat=inline'
}

//noinspection GroovyAssignabilityCheck
project.compileJava.dependsOn(createVersionFile)
gversion {
  srcDir = "src/main/java/"
  classPackage = "org.dovershockwave"
  className = "BuildConstants"
  dateFormat = "yyyy-MM-dd HH:mm:ss z"
  timeZone = "America/New_York"
  indent = "  "
}